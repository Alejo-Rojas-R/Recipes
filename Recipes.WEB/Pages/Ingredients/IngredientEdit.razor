@page "/ingredients/edit/{Id:int}"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@attribute [Authorize(Roles = "Admin")]
<h3>Editar Receta</h3>

@if (ingredient is null)
{
    <div class="spinner" />
}
else
{
    <IngredientForm @ref="ingredientForm" Ingredient="ingredient" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Ingredient? ingredient;
    private IngredientForm? ingredientForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Ingredient>($"api/ingredients/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("ingredients");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            ingredient = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/ingredients", ingredient);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            ingredientForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("ingredients");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("ingredients");
    }
}