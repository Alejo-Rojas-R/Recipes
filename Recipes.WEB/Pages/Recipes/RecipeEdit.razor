@page "/recipe/edit/{Id:int}"

@using Recipes.Shared.Entities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Editar Receta</h3>

@if (recipe is null)
{
    <div class="align-items-center">
        <img src=" https://img.pikbest.com/png-images/20190918/cartoon-snail-loading-loading-gif-animation_2734139.png!bw700 " />
    </div>
}
else
{
    <RecipeForm @ref="recipeForm" Recipe="recipe" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Recipe? recipe;
    private RecipeForm? recipeForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Recipe>($"api/recipes/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("recipes");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            recipe = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/recipes", recipe);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            recipeForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("recipes");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("recipes");
    }
}