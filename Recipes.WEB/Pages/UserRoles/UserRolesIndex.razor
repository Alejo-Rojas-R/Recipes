@page "/userroles"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Roles de usuarios</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/userroles/create">Nuevo Rol de Usuario</a>
</div>

<GenericList MyList="UserRoles">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Usuario</th>
                    <th>Rol</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var userRole in UserRoles!)
                {
                    <tr>
                        <td>
                            @GetUserName(userRole.UserId)
                        </td>
                        <td>
                            @GetRoleName(userRole.RoleId)
                        </td>
                        <td>
                            <a href="/userroles/edit/@userRole.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(userRole))>Borrar</button>

                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

@code {
    public List<UserRole>? UserRoles { get; set; }
    public List<User>? Users { get; set; }
    public List<Role>? Roles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var userRoleResponse = await repository.Get<List<UserRole>>("api/userroles");
        UserRoles = userRoleResponse.Response!;

        var userResponse = await repository.Get<List<User>>("api/users");
        Users = userResponse.Response!;

        var roleResponse = await repository.Get<List<Role>>("api/roles");
        Roles = roleResponse.Response!;
    }

    private string GetUserName(int userId)
    {
        var recipe = Users.FirstOrDefault(r => r.Id == userId);
        return recipe != null ? recipe.Name : string.Empty;
    }

    private string GetRoleName(int roleId)
    {
        var role = Roles.FirstOrDefault(c => c.Id == roleId);
        return role != null ? role.Name : string.Empty;
    }

    private async Task Delete(UserRole userRole)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/userroles/{userRole.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
