@page "/steps"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Pasos</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/steps/create">Nuevo Paso</a>
</div>

<GenericList MyList="Steps">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Order</th>
                    <th>Recipe</th>
                    <th>Descripción</th>
                    <th>Imagen</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var step in Steps!)
                {
                    <tr>
                        <td>
                            @step.Order
                        </td>
                        <td>
                            @GetRecipeTitle(step.RecipeId)
                        </td>
                        <td>
                            @step.Description
                        </td>
                        <td>
                            @step.ImageUrl
                        </td>
                        <td>
                            <a href="/steps/edit/@step.Id" class="btn btn-warning">Edit</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(step))>Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

@code {
    public List<Step>? Steps { get; set; }
    public List<Recipe>? Recipes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var stepResponse = await repository.Get<List<Step>>("api/steps");
        Steps = stepResponse.Response!;

        var recipeResponse = await repository.Get<List<Recipe>>("api/recipes");
        Recipes = recipeResponse.Response!;
    }

    private string GetRecipeTitle(int recipeId)
    {
        var recipe = Recipes.FirstOrDefault(r => r.Id == recipeId);
        return recipe != null ? recipe.Title : string.Empty;
    }

    private async Task Delete(Step step)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete the record?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/steps/{step.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
